services:
  bot_service:
    container_name: bot_service
    build:
      context: .
      dockerfile: bot_service/Dockerfile
    depends_on:
      bot_service_db:
        condition: service_healthy
    volumes:
      - ./bot_service:/srv/app/bot_service
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./logs/bot-service:/srv/app/bot_service/logs/bot-service
    env_file:
      - .env
    environment:
      - TZ=Europe/Moscow
    ports:
      - "8080:8080"
    restart: always

  user_service:
    container_name: user_service
    build:
      context: .
      dockerfile: user_service/Dockerfile
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./logs/user-service:/app/logs/user-service
    depends_on:
      user_service_db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - TZ=Europe/Moscow
    restart: always
    ports:
      - "8000:8000"

  bot_service_db:
    image: postgres:15
    container_name: bot_service_db
    environment:
      POSTGRES_DB: ${BOT_SERVICE_DB_NAME}
      POSTGRES_USER: ${BOT_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${BOT_SERVICE_DB_PASSWORD}
    volumes:
      - bot_service_db_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    ports:
      - "5432:5432"

  user_service_db:
    image: postgres:15
    container_name: user_service_db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}
      POSTGRES_USER: ${USER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
    volumes:
      - user_service_db_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    ports:
      - "5433:5432"

  nginx:
    build:
      dockerfile: ./Dockerfile.dev
      context: ./nginx/
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - static_volume:/user_service/staticfiles
      - media_volume:/user_service/media
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    restart: always
    depends_on:
      - bot_service
      - user_service
      - kibana

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  mailing_worker:
    container_name: mailing_worker
    build:
      context: .
      dockerfile: bot_service/Dockerfile
    command: python -m bot_service.workers.worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      bot_service_db:
        condition: service_healthy
    environment:
      - TZ=Europe/Moscow
    env_file:
      - .env
    restart: always

  elasticsearch:
    image: elasticsearch:7.16.1
    volumes:
      - ./elk_configs/elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./docker_volumes/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      ELASTIC_USERNAME: "${ELASTIC_USERNAME}"
      ELASTIC_PASSWORD: "${ELASTIC_PASSWORD}"
      discovery.type: single-node

  logstash:
    image: logstash:7.16.2
    volumes:
      - ./elk_configs/logstash/config.yml:/usr/share/logstash/config/logstash.yml
      - ./elk_configs/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./elk_configs/logstash/pipelines:/usr/share/logstash/pipelines
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
      ELASTIC_USERNAME: "${ELASTIC_USERNAME}"
      ELASTIC_PASSWORD: "${ELASTIC_PASSWORD}"
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:7.16.1
    depends_on:
      - elasticsearch
    volumes:
      - ./elk_configs/kibana/config.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    environment:
      ELASTIC_USERNAME: "${ELASTIC_USERNAME}"
      ELASTIC_PASSWORD: "${ELASTIC_PASSWORD}"

  beats:
    image: elastic/filebeat:7.16.2
    volumes:
      - ./logs:/usr/share/filebeat/logs:ro
      - ./elk_configs/filebeat/config.yml:/usr/share/filebeat/filebeat.yml
      - ./nginx/logs:/var/log/nginx:ro
    depends_on:
      - elasticsearch

volumes:
  bot_service_db_data:
  user_service_db_data:
  static_volume:
  media_volume:
