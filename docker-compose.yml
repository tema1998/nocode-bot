services:
  bot_service:
    build:
      context: .
      dockerfile: src/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq_broker:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./src:/srv/app/src
    ports:
      - "8080:8080" #TODO to delete on prod

#  celery_worker:
#    build:
#      context: .
#      dockerfile: ./broker/Dockerfile.celery
#    restart: always
#    depends_on:
#      redis:
#        condition: service_started
#      rabbitmq_broker:
#        condition: service_healthy
#    env_file:
#      - .env
#    command: celery -A src.tasks worker -l info  --concurrency=2
#    environment:
#      CELERY_BROKER_URL: amqp://${BROKER_USER}:${BROKER_PASS}@rabbitmq_broker:5672//
#      CELERY_RESULT_BACKEND: redis://:${REDIS_PASS}@redis:6379/0

#  flower:
#    build:
#      context: .
#      dockerfile: ./broker/Dockerfile.flower
#    restart: always
#    depends_on:
##      - celery_worker
#      - rabbitmq_broker
#    ports:
#      - "5555:5555" #TODO: DELETE ON PROD
#    volumes:
#      - flower_data:/app/flower_data
#    env_file:
#      - .env
#    environment:
#      CELERY_BROKER_URL: ${BROKER_PROTOCOL}://${BROKER_USER}:${BROKER_PASS}@${BROKER_HOST}:${BROKER_PORT}//
#      CELERY_RESULT_BACKEND: redis://:${REDIS_PASS}@${REDIS_HOST}:${REDIS_PORT}/0
#    command: celery -A src.celery.tasks flower --port=5555

#  beat:
#    restart: always
#    build:
#      context: .
#    depends_on:
#      - worker
#      - redis
#    volumes:
#      - ./src/:/usr/src/app/
#    env_file:
#      - ./.env
#    command: ["celery", "--workdir=./mail_sender", "-A", "mail_sender", "beat", "-l", "info", "-S", "django"]

  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    ports:
      - "5432:5432" #TODO to delete on prod

  rabbitmq_broker:
    image: rabbitmq:4.0-management  # Includes the management plugin for monitoring
    container_name: rabbitmq_broker
    ports:
      - "5672:5672" # Port for AMQP #TODO: DELETE ON PROD
      - "15672:15672" # Port for web-interface #TODO: DELETE ON PROD
    environment:
      RABBITMQ_DEFAULT_USER: ${BROKER_USER}
      RABBITMQ_DEFAULT_PASS: ${BROKER_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 10s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    env_file:
      - .env

  redis:
    image: redis:latest
    ports:
      - "6379:6379" #TODO: DELETE ON PROD
    volumes:
      - redis_data:/data
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASS}
    command: redis-server --requirepass ${REDIS_PASS}

volumes:
  db_data:
  rabbitmq_data:
  redis_data:
  flower_data: